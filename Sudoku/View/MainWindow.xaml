<Window x:Class="Sudoku.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Sudoku"
        xmlns:viewModel="clr-namespace:Sudoku.ViewModel"
        xmlns:converters="clr-namespace:Sudoku.ViewModel.Converters"
        mc:Ignorable="d"
        Title="Sudoku" SizeToContent="WidthAndHeight" ResizeMode="NoResize" WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <viewModel:PuzzleViewModel x:Key="PuzzleViewModel"/>
        <converters:GridIntToStringConverter x:Key="GridIntToStringConverter"/>
        <converters:IntToSymbolConverter x:Key="IntToSymbolConverter"/>
        <converters:IntListToSymbolListConverter x:Key="IntListToSymbolListConverter"/>
        <converters:GameStateToVisibilityConverter x:Key="GameStateToVisibilityConverter"/>
        <converters:PuzzleNotNullConverter x:Key="PuzzleNotNullConverter"/>
        <converters:CompletePuzzleNullOrPuzzleCompleteBoolConverter x:Key="CompletePuzzleNullOrPuzzleCompleteBoolConverter"/>
        <converters:GameTypeToBoolConverter x:Key="GameTypeToBoolConverter"/>
        <converters:CompletePuzzleToVisibilityConverter x:Key="CompletePuzzleToVisibilityConverter"/>

        <Style x:Key="RoundedListBox" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="{x:Null}"/>
            <Style.Resources>
                <Style TargetType="Border">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="CornerRadius" Value="3"/>
                </Style>
            </Style.Resources>
        </Style>
        
        <DataTemplate x:Key ="CellTemplate">
            <Border x:Name ="Border" Background="DarkGray" BorderBrush ="White" BorderThickness ="1" Width="{Binding RelativeSource={RelativeSource self}, Path=ActualHeight}">
                <TextBlock x:Name="TextBlock" Focusable="False" HorizontalAlignment ="Center" VerticalAlignment ="Center" FontWeight ="Bold" FontSize ="24" Text ="{Binding Path=content, Converter={StaticResource IntToSymbolConverter}}"/>
                <Border.ContextMenu>
                    <ContextMenu>
                        <ContextMenu.ItemContainerStyle>
                            <Style TargetType ="{x:Type MenuItem}">
                                <Setter Property ="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType ="{x:Type MenuItem}">
                                            <ContentPresenter x:Name="Header" ContentSource="Header" RecognizesAccessKey="True"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ContextMenu.ItemContainerStyle>
                        <ListBox x:Name="PossibleValuesList" Style="{StaticResource RoundedListBox}" Background="White" BorderThickness="0" Width="35" Margin="0" SelectedItem ="{Binding Path=content, Mode=TwoWay, Converter={StaticResource IntToSymbolConverter}}" HorizontalAlignment ="Stretch" VerticalAlignment ="Stretch" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext}" ItemsSource="{Binding Path=possibleValues, Converter={StaticResource IntListToSymbolListConverter}}" SelectionChanged="PossibleValuesList_SelectionChanged"/>
                    </ContextMenu>
                </Border.ContextMenu>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding algorithmEntered}" Value="True">
                    <Setter TargetName="Border" Property="TextBlock.Foreground" Value="ForestGreen"/>
                    <Setter TargetName="Border" Property="ContextMenu" Value="{x:Null}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding startPoint}" Value="True">
                    <Setter TargetName="Border" Property="TextBlock.Foreground" Value="CornflowerBlue"/>
                    <Setter TargetName="Border" Property="ContextMenu" Value="{x:Null}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding coloured}" Value="True">
                    <Setter TargetName="Border" Property="Background" Value="LightGray"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key ="OuterRowTemplate">
            <ItemsControl ItemsSource ="{Binding}" ItemTemplate ="{StaticResource CellTemplate}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Rows="1"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </DataTemplate>

        <Style x:Key="SmallButton" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="23"></Setter>
            <Setter Property="Width" Value="100"></Setter>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="BorderBrush" Value="Black"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"></ContentPresenter>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" Value="0.5"></Setter>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Gray"></Setter>
                    <Setter Property="Foreground" Value="Black"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="RoundedTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Height" Value="24"></Setter>
            <Setter Property="Margin" Value="5"></Setter>
            <Setter Property="BorderBrush" Value="Black"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ScrollViewer x:Name="PART_ContentHost" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"></ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RoundedExpander" TargetType="{x:Type Expander}">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Width" Value="150"/>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        
        <DockPanel Grid.Row="0">
            <StackPanel DockPanel.Dock="Left">
                <Expander Style="{StaticResource RoundedExpander}" IsExpanded="True" Header="Main Menu">
                    <Border Margin="5" BorderBrush="Black" BorderThickness="1" CornerRadius="3">
                        <StackPanel>
                            <Button Style="{StaticResource SmallButton}" x:Name="LoadGameButton" Content="Load Game" Click="LoadGameButton_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Allows you to load a game from a text file</TextBlock>
                                            <TextBlock FontWeight="Bold">WARNING!</TextBlock>
                                            <TextBlock>Puzzles larger than 9x9 are allowed but could take a long time to solve!</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                            <Button Style="{StaticResource SmallButton}" x:Name="SaveGameButton" Content="Save Game" DataContext="{StaticResource ResourceKey=PuzzleViewModel}" IsEnabled="{Binding Mode=OneWay, Path=puzzle, Converter={StaticResource PuzzleNotNullConverter}}" Click="SaveGameButton_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Allows you to save the current state of the puzzle to a text file</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                            <Button Style="{StaticResource SmallButton}" x:Name="Reset" Content="Reset Game" DataContext="{StaticResource ResourceKey=PuzzleViewModel}" IsEnabled="{Binding Mode=OneWay, Path=starterPuzzle, Converter={StaticResource PuzzleNotNullConverter}}" Click="Reset_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Resets the puzzle to its original state on load</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                            <Button Style="{StaticResource SmallButton}" x:Name="QuitButton" Content="Quit" Click="QuitButton_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Quits the game</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                        </StackPanel>
                    </Border>
                </Expander>

                <Expander Style="{StaticResource RoundedExpander}" IsExpanded="True" Header="New Game Settings">
                    <Border BorderBrush="Black" BorderThickness="1" Margin="5" CornerRadius="3">
                        <StackPanel>
                            <Button Style="{StaticResource SmallButton}" x:Name="StartGameButton" Content="Start Game" DataContext="{StaticResource ResourceKey=PuzzleViewModel}" IsEnabled="{Binding Mode=OneWay, Path=gameType, Converter={StaticResource GameTypeToBoolConverter}}" Click="StartGameButton_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Used to start a new game after starting values have been entered</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                            <Button Style="{StaticResource SmallButton}" x:Name="GeneratePuzzleButton" Content="Generate Game" Click="GeneratePuzzleButton_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Generates a puzzle with the sizes selected below</TextBlock>
                                            <TextBlock FontWeight="Bold">WARNING!</TextBlock>
                                            <TextBlock>trying to generate a puzzle larger than 9x9 could take awhile!</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                            <Button Style="{StaticResource SmallButton}" x:Name="NewGameButton" Content="New Game" Click="NewGameButton_Click">
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Generates a blank puzzle with the sizes selected below</TextBlock>
                                            <TextBlock FontWeight="Bold">WARNING!</TextBlock>
                                            <TextBlock>Puzzles larger than 9x9 are allowed but could take a long time to solve!</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>
                            <Label Content="Grid Size:" Margin="0"/>
                            <ComboBox x:Name="SizesComboBox" Margin="5,0,5,0" SelectedIndex="0" ItemsSource="{Binding Path=dictionaryKeys}" SelectionChanged="SizesComboBox_SelectionChanged">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Converter={StaticResource GridIntToStringConverter}}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.ToolTip>
                                    <StackPanel>
                                        <TextBlock>The size of the puzzle required</TextBlock>
                                    </StackPanel>
                                </ComboBox.ToolTip>
                            </ComboBox>
                            <Label Content="Sub Grid Size:" Margin="0"/>
                            <ComboBox x:Name="SubSizesComboBox" Margin="5,0,5,5" SelectedIndex="0">
                                <ComboBox.ToolTip>
                                    <StackPanel>
                                        <TextBlock>The size of the sub grid required</TextBlock>
                                    </StackPanel>
                                </ComboBox.ToolTip>
                            </ComboBox>
                        </StackPanel>
                    </Border>
                </Expander>

                <Expander x:Name="GameControlsExpander" Style="{StaticResource RoundedExpander}" DataContext="{StaticResource ResourceKey=PuzzleViewModel}" Header="Game Controls" IsExpanded="True">
                    <Border BorderBrush="Black" BorderThickness="1" Margin="5" CornerRadius="3">
                        <StackPanel>
                            <Button Style="{StaticResource SmallButton}" x:Name="SolveButton" Content="Solve" Click="SolveButton_Click">
                                <Button.IsEnabled>
                                    <MultiBinding Converter="{StaticResource CompletePuzzleNullOrPuzzleCompleteBoolConverter}">
                                        <Binding Mode="OneWay" Path="completePuzzle"/>
                                        <Binding Mode="OneWay" Path="completionState"/>
                                    </MultiBinding>
                                </Button.IsEnabled>
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>Fills in the puzzle with the solution</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>

                            <Button Style="{StaticResource SmallButton}" x:Name="HintButton" Content="Hint" Click="HintButton_Click">
                                <Button.IsEnabled>
                                    <MultiBinding Converter="{StaticResource CompletePuzzleNullOrPuzzleCompleteBoolConverter}">
                                        <Binding Mode="OneWay" Path="completePuzzle"/>
                                        <Binding Mode="OneWay" Path="completionState"/>
                                    </MultiBinding>
                                </Button.IsEnabled>
                                <Button.ToolTip>
                                    <ToolTip>
                                        <StackPanel>
                                            <TextBlock>fills correct values in cells depending on how many selected by slider below</TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </Button.ToolTip>
                            </Button>

                            <DockPanel Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <DockPanel.IsEnabled>
                                    <MultiBinding Converter="{StaticResource CompletePuzzleNullOrPuzzleCompleteBoolConverter}">
                                        <Binding Mode="OneWay" Path="completePuzzle"/>
                                        <Binding Mode="OneWay" Path="completionState"/>
                                    </MultiBinding>
                                </DockPanel.IsEnabled>

                                <TextBox Style="{StaticResource RoundedTextBox}" Text="{Binding ElementName=HintSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" DockPanel.Dock="Right" Width="20" />
                                <Slider x:Name="HintSlider" HorizontalAlignment="Center" VerticalAlignment="Center" Width="75" IsSnapToTickEnabled="True" TickFrequency="1" TickPlacement="BottomRight" Height="24" Minimum="1" ToolTip="Select the number of hints to be provided"/>
                            </DockPanel>

                            <CheckBox x:Name="PossibleValueHints" Content="Possible value hints" Margin="5" HorizontalAlignment="Center" IsEnabled="{Binding Mode=OneWay, Path=puzzle, Converter={StaticResource PuzzleNotNullConverter}}" Click="PossibleValueHints_Click">
                                <CheckBox.ToolTip>
                                    <StackPanel>
                                        <TextBlock>When checked shows the possible values for a cell on right click</TextBlock>
                                    </StackPanel>
                                </CheckBox.ToolTip>
                            </CheckBox>
                        </StackPanel>
                    </Border>
                </Expander>
            </StackPanel>

            <Border DataContext="{StaticResource ResourceKey=PuzzleViewModel}" Visibility="{Binding Path=completePuzzle, Converter={StaticResource CompletePuzzleToVisibilityConverter}}" BorderBrush="Black" BorderThickness="1" VerticalAlignment="Top" DockPanel.Dock="Right" Margin="5" CornerRadius="3" Background="LightGray" MaxHeight="{Binding ElementName=Grid, Path=ActualHeight}">
                <DockPanel>
                    <Label x:Name="AlgorithmsLabel" DockPanel.Dock="Top" Content="Algorithms Used" FontWeight="Bold" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="0"/>
                    <ListBox Style="{StaticResource RoundedListBox}" x:Name="AlgorithmsList" ItemsSource="{Binding Path=algorithmsUsed, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Margin="5,0,5,5" VerticalAlignment="Stretch"/>
                </DockPanel>
            </Border>

            <StackPanel DataContext="{StaticResource ResourceKey=PuzzleViewModel}" IsEnabled="{Binding Path=puzzle, Converter={StaticResource PuzzleNotNullConverter}}" Visibility="{Binding Path=gameState, Converter={StaticResource GameStateToVisibilityConverter}}">
                <ItemsControl ItemTemplate ="{StaticResource OuterRowTemplate}" ItemsSource="{Binding Path=grid}" x:Name ="Grid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="5">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <UniformGrid Columns="1"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </StackPanel>
        </DockPanel>

        <Border Grid.Row="1" Background="LightGray" BorderBrush="DarkGray" BorderThickness="1">
            <DockPanel VerticalAlignment="Bottom">
                <Label Content="Algorithm status message: " DockPanel.Dock="Left" FontWeight="Bold"/>
                <Label DockPanel.Dock="Right" DataContext="{StaticResource ResourceKey=PuzzleViewModel}" Content="{Binding Path=solvingStatusMessage}" FontWeight="Bold"/>
            </DockPanel>
        </Border>
    </Grid>
</Window>
